# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:18:05+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Path, Query

from models import (
    AlertAnnotationInfo,
    AlertFilterPublic,
    AlertInfo,
    AlertReport,
    AlertsAlertIdAnnotationsGetResponse,
    AlertsAlertIdAttachmentsGetResponse,
    AlertsAlertIdNotificationsGetResponse,
    AlertSettings,
    CategoriesImagesGetResponse,
    CategoriesTeamIdCategoryIdSubscriptionsGetResponse,
    CategoriesTeamIdCategoryIdSubscriptionsPostRequest,
    CategoriesTeamIdCategoryIdSubscriptionsPostResponse,
    CategoriesTeamIdGetResponse,
    CategoriesTeamIdMetricsGetResponse,
    CategoryInfo,
    CategoryMetrics,
    ChangeAlertStatusFilterInfo,
    ChangeAlertStatusInfo,
    ChangeAlertStatusMultipleInfo,
    ChannelPriceInfo,
    DeleteRangeInfo,
    ErrorResponseContent,
    EventFilter,
    EventsEventIdParametersGetResponse,
    OverviewAlert,
    OverviewAlertPagedResultsPublic,
    OverviewEvent,
    OverviewEventPagedResultsPublic,
    PrepaidBalanceInfo,
    PrepaidSettingsInfo,
    PrepaidTransactionsGetResponse,
    RaiseAlertInfo,
    ScheduleInfo,
    ScriptInstanceCustomUserData,
    ScriptInstanceDetails,
    ScriptsInstancesGetResponse,
    ScriptsInventoryGetResponse,
    ScriptsInventoryParsedGetResponse,
    StringItemsWrapper,
    SubscriptionInfo,
    SubscriptionProfile,
    SubscriptionsGetResponse,
    SubscriptionsSubscriptionIdFeaturesGetResponse,
    SubscriptionsSubscriptionIdPrepaidTransactionsGetResponse,
    SubscriptionsSubscriptionIdTeamsGetResponse,
    TeamDutySummaryInfo,
    TeamInfo,
    TeamProfile,
    TeamSetupProgress,
    TeamsGetResponse,
    TeamsTeamIdAlertReportsGetResponse,
    TeamsTeamIdDutyReportsGetResponse,
    TeamsTeamIdEventSourcesGetResponse,
    TeamsTeamIdMembershipsGetResponse,
    TeamsTeamIdMembershipsPostResponse,
    TeamsTeamIdSchedulesDeleteRangePostResponse,
    TeamsTeamIdSchedulesGetResponse,
    TeamsTeamIdSchedulesMultiplePostRequest,
    TeamsTeamIdSchedulesMultiplePostResponse,
    UpdatePasswordInfo,
    UserDutyInfo,
    UserImage,
    UserInfo,
    UserInvitationInfo,
    UserLicenseInfo,
    UserMembership,
    UserProfile,
    UserSetupProgress,
    UsersGetResponse,
    UsersInvitation,
    WebhookBaseInfo,
    WebhookInfo,
    WebhooksGetResponse,
)

app = MCPProxy(
    contact={
        'url': 'https://www.signl4.com/feedback-we-love-hear-from-you/',
        'x-twitter': 'signl4me',
    },
    description="<p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>",
    license={'name': 'Derdack GmbH', 'url': 'https://www.signl4.com'},
    title='SIGNL4 API',
    version='v1',
    servers=[{'url': 'https://connect.signl4.com/api'}],
)


@app.post(
    '/alerts',
    description=""" Triggers a new alert for your team. All team members on duty will receive alert notifications. """,
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_alerts(body: RaiseAlertInfo = None):
    """
    Trigger Alert
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/alerts/acknowledgeAll',
    description=""" This method confirms all unhandled alerts your team currently has by a specific user. """,
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_alerts_acknowledge_all(
    user_id: Optional[str] = Query(None, alias='userId'),
    body: ChangeAlertStatusFilterInfo = None,
):
    """
    Confirms all visible alerts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/alerts/acknowledgeMultiple',
    description=""" This method confirms all alerts provided. """,
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_alerts_acknowledge_multiple(body: ChangeAlertStatusMultipleInfo = None):
    """
    Acknowlegde multiple alerts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/alerts/closeAll',
    description=""" This method closes all acknowledged alerts your team currently has. """,
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_alerts_close_all(
    user_id: Optional[str] = Query(None, alias='userId'),
    body: ChangeAlertStatusFilterInfo = None,
):
    """
    Close all acknowledged alerts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/alerts/closeMultiple',
    description=""" This method closes all alerts provided. """,
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_alerts_close_multiple(body: ChangeAlertStatusMultipleInfo = None):
    """
    Close multiple alerts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/alerts/paged',
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_alerts_paged(
    max_results: Optional[int] = Query(None, alias='maxResults'),
    user_id: Optional[str] = Query(None, alias='userId'),
    body: AlertFilterPublic = None,
):
    """
    Gets alerts paged
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/alerts/report',
    description=""" Returns information about the occurred alert volume in different time periods as well as information about the
response behaviour (amount of confirmed and unhandled alerts) of your team members. """,
    tags=['alert_lifecycle_management', 'user_profile_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_alerts_report(user_id: Optional[str] = Query(None, alias='userId')):
    """
    Get Alert Report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/alerts/undoAcknowledgeMultiple',
    description=""" This method tries to undo the acknowledgement of multiple alerts via a queue. The operation is handled in the background. """,
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_alerts_undo_acknowledge_multiple(body: ChangeAlertStatusMultipleInfo = None):
    """
    Queue undo of multiple acknowledgments.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/alerts/undoCloseMultiple',
    description=""" This method tries to undo multiple alert closes. The operation is handled in the background. """,
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_alerts_undo_close_multiple(body: ChangeAlertStatusMultipleInfo = None):
    """
    Withdraw closure of multiple alerts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/alerts/{alertId}',
    description=""" Gets an alert by id. """,
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_alerts__alert_id(alert_id: str = Path(..., alias='alertId')):
    """
    Get Alert
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/alerts/{alertId}/acknowledge',
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_alerts__alert_id_acknowledge(
    alert_id: str = Path(..., alias='alertId'), body: ChangeAlertStatusInfo = None
):
    """
    Acknowledge an alert
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/alerts/{alertId}/annotate',
    description=""" Annotates an alert by given Annotation Info. """,
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_alerts__alert_id_annotate(
    alert_id: str = Path(..., alias='alertId'), body: AlertAnnotationInfo = None
):
    """
    Annotate Alert
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/alerts/{alertId}/annotations',
    description=""" Get annotations of an alert by id. """,
    tags=['alert_lifecycle_management', 'event_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_alerts__alert_id_annotations(alert_id: str = Path(..., alias='alertId')):
    """
    Get annotations of an alert
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/alerts/{alertId}/attachments',
    description=""" Get attachments of an alert by id. """,
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_alerts__alert_id_attachments(alert_id: str = Path(..., alias='alertId')):
    """
    Get attachments of an alert
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/alerts/{alertId}/attachments/{attachmentId}',
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_alerts__alert_id_attachments__attachment_id(
    alert_id: str = Path(..., alias='alertId'),
    attachment_id: str = Path(..., alias='attachmentId'),
    width: Optional[int] = None,
    height: Optional[int] = None,
    scale: Optional[bool] = True,
):
    """
    Gets a specified attachment of a specified alert.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/alerts/{alertId}/close',
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_alerts__alert_id_close(
    alert_id: str = Path(..., alias='alertId'), body: ChangeAlertStatusInfo = None
):
    """
    Close an alert
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/alerts/{alertId}/notifications',
    description=""" Get notifications of all users by alert id. """,
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_alerts__alert_id_notifications(alert_id: str = Path(..., alias='alertId')):
    """
    Get alert notifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/alerts/{alertId}/overview',
    description=""" Get overview alert by id. """,
    tags=['alert_lifecycle_management', 'event_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_alerts__alert_id_overview(alert_id: str = Path(..., alias='alertId')):
    """
    Get an overview alert.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/alerts/{alertId}/undoAcknowledge',
    description=""" This method tries to undo an alert acknowledgement. """,
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_alerts__alert_id_undo_acknowledge(
    alert_id: str = Path(..., alias='alertId'), body: ChangeAlertStatusInfo = None
):
    """
    Undo the acknowledgement of an alert.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/alerts/{alertId}/undoClose',
    description=""" This method tries to undo an alert close. """,
    tags=['alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_alerts__alert_id_undo_close(
    alert_id: str = Path(..., alias='alertId'), body: ChangeAlertStatusInfo = None
):
    """
    Undo the closure of an alert.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/categories/images',
    tags=['alert_category_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_categories_images():
    """
        Gets the names of all alert category images.
    You can get the image by going to account.signl4.com/images/alerts/categoryImageName.svg
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/categories/{teamId}',
    description=""" Sample Request:
            
    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7 """,
    tags=['alert_category_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_categories__team_id(team_id: str = Path(..., alias='teamId')):
    """
    Get all categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/categories/{teamId}',
    description=""" Sample Request:
            
    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7
    {
        "name": "Water",
        "imageName": "water.svg",
        "color": "#0000cc",
        "keywordMatching": "Any",
        "keywords": [
            {
                "value": "H2O"
            },
            {
                "value": "Water"
            }
        ]
    } """,
    tags=['alert_category_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_categories__team_id(
    team_id: str = Path(..., alias='teamId'), body: CategoryInfo = None
):
    """
    Create a new category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/categories/{teamId}/metrics',
    description=""" Sample Request:
            
    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/metrics """,
    tags=['alert_category_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_categories__team_id_metrics(team_id: str = Path(..., alias='teamId')):
    """
    Get metrics for all categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/categories/{teamId}/{categoryId}',
    description=""" Sample Request:
            
    DELETE /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e """,
    tags=['alert_category_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_categories__team_id__category_id(
    team_id: str = Path(..., alias='teamId'),
    category_id: str = Path(..., alias='categoryId'),
):
    """
    Delete an existing category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/categories/{teamId}/{categoryId}',
    description=""" Sample Request:
            
    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e """,
    tags=['alert_category_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_categories__team_id__category_id(
    team_id: str = Path(..., alias='teamId'),
    category_id: str = Path(..., alias='categoryId'),
):
    """
    Get a specific category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/categories/{teamId}/{categoryId}',
    description=""" Sample Request:
            
    PUT /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e
    {
        "name": "Water-Updated",
        "imageName": "water.svg",
        "color": "#0000cc",
        "keywordMatching": "All",
        "keywords": [
            {
                "value": "H2O"
            },
            {
                "value": "Water"
            },
            {
                "value": "Wet"
            }
        ]
    } """,
    tags=['alert_category_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_categories__team_id__category_id(
    team_id: str = Path(..., alias='teamId'),
    category_id: str = Path(..., alias='categoryId'),
    body: CategoryInfo = None,
):
    """
    Update an existing category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/categories/{teamId}/{categoryId}/metrics',
    description=""" Sample Request:
            
    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/metrics """,
    tags=['alert_category_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_categories__team_id__category_id_metrics(
    team_id: str = Path(..., alias='teamId'),
    category_id: str = Path(..., alias='categoryId'),
):
    """
    Get metrics for a specific category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/categories/{teamId}/{categoryId}/subscriptions',
    description=""" Sample Request:
            
    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions
    {
    } """,
    tags=['alert_category_management', 'general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_categories__team_id__category_id_subscriptions(
    team_id: str = Path(..., alias='teamId'),
    category_id: str = Path(..., alias='categoryId'),
):
    """
    Get category subscriptions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/categories/{teamId}/{categoryId}/subscriptions',
    description=""" Sample Request:
            
    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions
    {
    } """,
    tags=['alert_category_management', 'general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_categories__team_id__category_id_subscriptions(
    team_id: str = Path(..., alias='teamId'),
    category_id: str = Path(..., alias='categoryId'),
    body: CategoriesTeamIdCategoryIdSubscriptionsPostRequest = None,
):
    """
    Set category subscriptions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/events/paged',
    description=""" Get overview event paged. If there are more results, you also get a continuation token which you can add to the event filter. """,
    tags=['event_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_events_paged(
    max_results: Optional[int] = Query(None, alias='maxResults'),
    body: EventFilter = None,
):
    """
    Get overview event paged.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/events/{eventId}/overview',
    description=""" Get overview event by id. """,
    tags=['event_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_events__event_id_overview(event_id: str = Path(..., alias='eventId')):
    """
    Get overview event
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/events/{eventId}/parameters',
    description=""" Get parameters of an event by id. """,
    tags=['event_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_events__event_id_parameters(event_id: str = Path(..., alias='eventId')):
    """
    Get event parameters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/prepaid/balance',
    tags=['prepaid_subscription_handling', 'general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_prepaid_balance():
    """
    Get your subscription's current prepaid balance.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/prepaid/settings',
    tags=['prepaid_subscription_handling', 'general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_prepaid_settings():
    """
    Get your subscription's current prepaid settings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/prepaid/settings',
    tags=['prepaid_subscription_handling', 'general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_prepaid_settings(body: PrepaidSettingsInfo = None):
    """
    Update your subscription's current prepaid settings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/prepaid/transactions',
    tags=['prepaid_subscription_handling', 'general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_prepaid_transactions():
    """
    Get your subscription's prepaid transactions.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/scripts/instances',
    description=""" Returns all script instances in the subscription. """,
    tags=['script_instance_operations', 'team_details_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_scripts_instances(team_id: Optional[str] = Query(None, alias='teamId')):
    """
    Returns all script instances of the SIGNL4 team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/scripts/instances',
    description=""" Creates a new script instance of the script specified in the request body. """,
    tags=['script_instance_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_scripts_instances(body: ScriptInstanceDetails = None):
    """
    Creates a new script instance in the in the SIGNL4 team.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/scripts/instances/{instanceId}',
    description=""" Gets the script instance specified by the passed instance id. """,
    tags=['script_instance_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_scripts_instances__instance_id(
    instance_id: str = Path(..., alias='instanceId')
):
    """
    Deletes a script instance.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/scripts/instances/{instanceId}',
    description=""" Gets the script instance specified by the passed instance id. """,
    tags=['script_instance_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_scripts_instances__instance_id(
    instance_id: str = Path(..., alias='instanceId')
):
    """
    Returns all information about a given script instance which includes its runtime status.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/scripts/instances/{instanceId}',
    description=""" Updates the specified script instance. """,
    tags=['script_instance_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_scripts_instances__instance_id(
    instance_id: str = Path(..., alias='instanceId'), body: ScriptInstanceDetails = None
):
    """
    Updates a given script instance, typically used for updating the configuration of a script.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/scripts/instances/{instanceId}/data',
    description=""" Updates the specified script instance. """,
    tags=['script_instance_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_scripts_instances__instance_id_data(
    instance_id: str = Path(..., alias='instanceId'),
    body: ScriptInstanceCustomUserData = None,
):
    """
    Updates custom data of a given script instance which includes its display name.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/scripts/instances/{instanceId}/disable',
    tags=['script_instance_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_scripts_instances__instance_id_disable(
    instance_id: str = Path(..., alias='instanceId')
):
    """
    Disables a given script instance.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/scripts/instances/{instanceId}/enable',
    tags=['script_instance_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_scripts_instances__instance_id_enable(
    instance_id: str = Path(..., alias='instanceId')
):
    """
    Enables a script instance.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/scripts/inventory',
    description=""" Returns all available inventory scripts which can be added to a SIGNL4 subscription. """,
    tags=['general_subscription_management', 'script_instance_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_scripts_inventory():
    """
    Returns all available inventory scripts which can be added to a SIGNL4 subscription.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/scripts/inventory/parsed',
    tags=['script_instance_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_scripts_inventory_parsed(language: Optional[str] = None):
    """
    Returns all inventory scripts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/scripts/inventory/parsed/{scriptId}',
    description=""" Gets the script specified by the passed script id. """,
    tags=['script_instance_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_scripts_inventory_parsed__script_id(
    script_id: str = Path(..., alias='scriptId'), language: Optional[str] = None
):
    """
    Returns an inventory script by its id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions',
    tags=['general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_subscriptions():
    """
    Get infos of all available/managed subscriptions.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/{subscriptionId}',
    tags=['general_subscription_management', 'alert_category_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_subscriptions__subscription_id(
    subscription_id: str = Path(..., alias='subscriptionId')
):
    """
    Get infos of a specific subscription.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/{subscriptionId}/channelPrices',
    tags=['general_subscription_management', 'prepaid_subscription_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_subscriptions__subscription_id_channel_prices(
    subscription_id: str = Path(..., alias='subscriptionId')
):
    """
    Returns the subscription's channel price information.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/{subscriptionId}/features',
    tags=['general_subscription_management', 'alert_category_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_subscriptions__subscription_id_features(
    subscription_id: str = Path(..., alias='subscriptionId')
):
    """
    Returns the features of a specified subscription.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/{subscriptionId}/prepaidBalance',
    tags=['prepaid_subscription_handling', 'general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_subscriptions__subscription_id_prepaid_balance(
    subscription_id: str = Path(..., alias='subscriptionId')
):
    """
    Get a subscription's current prepaid balance.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/{subscriptionId}/prepaidSettings',
    tags=['prepaid_subscription_handling', 'general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_subscriptions__subscription_id_prepaid_settings(
    subscription_id: str = Path(..., alias='subscriptionId')
):
    """
    Get a subscription's current prepaid settings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/subscriptions/{subscriptionId}/prepaidSettings',
    tags=['prepaid_subscription_handling', 'general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_subscriptions__subscription_id_prepaid_settings(
    subscription_id: str = Path(..., alias='subscriptionId'),
    body: PrepaidSettingsInfo = None,
):
    """
    Update a subscription's current prepaid settings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/{subscriptionId}/prepaidTransactions',
    tags=['prepaid_subscription_handling', 'general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_subscriptions__subscription_id_prepaid_transactions(
    subscription_id: str = Path(..., alias='subscriptionId')
):
    """
    Get a subscription's prepaid transactions.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/subscriptions/{subscriptionId}/profile',
    tags=['general_subscription_management', 'alert_category_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_subscriptions__subscription_id_profile(
    subscription_id: str = Path(..., alias='subscriptionId'),
    body: SubscriptionProfile = None,
):
    """
    Updates a subscriptions profile.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/{subscriptionId}/teams',
    tags=['general_subscription_management', 'team_details_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_subscriptions__subscription_id_teams(
    subscription_id: str = Path(..., alias='subscriptionId')
):
    """
    Get infos for all teams of the subscription.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/{subscriptionId}/userLicenses',
    tags=['general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_subscriptions__subscription_id_user_licenses(
    subscription_id: str = Path(..., alias='subscriptionId')
):
    """
    Gets a subscription's user licenses.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams',
    tags=['general_subscription_management', 'team_details_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teams():
    """
    Get infos of all teams.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{teamId}',
    tags=['team_details_retrieval', 'general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teams__team_id(team_id: str = Path(..., alias='teamId')):
    """
    Gets infos of a specific team.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{teamId}/alertReports',
    tags=['alert_lifecycle_management', 'team_details_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teams__team_id_alert_reports(team_id: str = Path(..., alias='teamId')):
    """
    Get information about downloadable alert reports
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{teamId}/alertReports/{fileName}',
    tags=['alert_lifecycle_management', 'team_details_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teams__team_id_alert_reports__file_name(
    team_id: str = Path(..., alias='teamId'),
    file_name: str = Path(..., alias='fileName'),
):
    """
    Returns Alert Report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{teamId}/alertSettings',
    tags=['team_details_retrieval', 'alert_lifecycle_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teams__team_id_alert_settings(team_id: str = Path(..., alias='teamId')):
    """
    Gets alert settings of a specific team.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/teams/{teamId}/alertSettings',
    tags=['alert_lifecycle_management', 'team_details_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_teams__team_id_alert_settings(
    team_id: str = Path(..., alias='teamId'), body: AlertSettings = None
):
    """
    Sets alert settings of a specific team.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{teamId}/dutyReports',
    tags=['team_details_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teams__team_id_duty_reports(team_id: str = Path(..., alias='teamId')):
    """
    Get Information about downloadable reports
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{teamId}/dutyReports/{fileName}',
    tags=['team_duty_schedules', 'team_details_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teams__team_id_duty_reports__file_name(
    team_id: str = Path(..., alias='teamId'),
    file_name: str = Path(..., alias='fileName'),
):
    """
    Download duty report with a specific fileName
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{teamId}/dutysummary',
    tags=['team_details_retrieval', 'team_duty_schedules'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teams__team_id_dutysummary(
    team_id: str = Path(..., alias='teamId'),
    last_two_duties: Optional[bool] = Query(None, alias='lastTwoDuties'),
):
    """
    Get duty assistant info for a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{teamId}/eventSources',
    tags=['event_data_management', 'team_details_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teams__team_id_event_sources(team_id: str = Path(..., alias='teamId')):
    """
    Gets event sources of a specific team.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{teamId}/memberships',
    tags=['team_membership_management', 'team_details_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teams__team_id_memberships(team_id: str = Path(..., alias='teamId')):
    """
    Get all invites of a team.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/teams/{teamId}/memberships',
    tags=['team_membership_management', 'general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_teams__team_id_memberships(
    team_id: str = Path(..., alias='teamId'), body: UsersInvitation = None
):
    """
    Invite users to a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/teams/{teamId}/memberships/resendInviteMail',
    tags=['team_membership_management', 'general_subscription_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_teams__team_id_memberships_resend_invite_mail(
    team_id: str = Path(..., alias='teamId'), body: UserInvitationInfo = None
):
    """
    Sends invite email again if an invite exists
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/teams/{teamId}/memberships/{userId}',
    tags=['team_membership_management', 'user_profile_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_teams__team_id_memberships__user_id(
    team_id: str = Path(..., alias='teamId'),
    user_id: str = Path(..., alias='userId'),
    requester_user_id: Optional[str] = Query(None, alias='requesterUserId'),
):
    """
    Removes a user or invitation from a team, and may delete the user if he is not in any team.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/teams/{teamId}/memberships/{userId}',
    description=""" Updates the user's team membership. You can move the user to another team within the subscription
and/or change the user's role. """,
    tags=['team_membership_management', 'user_profile_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_teams__team_id_memberships__user_id(
    team_id: str = Path(..., alias='teamId'),
    user_id: str = Path(..., alias='userId'),
    requester_user_id: Optional[str] = Query(None, alias='requesterUserId'),
    body: UserMembership = None,
):
    """
    Update user's team membership.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/teams/{teamId}/profile',
    tags=['team_profile_updates'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_teams__team_id_profile(
    team_id: str = Path(..., alias='teamId'), body: TeamProfile = None
):
    """
    Updates team profile of a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{teamId}/schedules',
    tags=['team_details_retrieval', 'team_duty_schedules'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teams__team_id_schedules(
    team_id: str = Path(..., alias='teamId'),
    user_id: Optional[str] = Query(None, alias='UserId'),
    min_date: Optional[datetime] = Query(None, alias='MinDate'),
    limit: Optional[int] = Query(None, alias='Limit'),
):
    """
    Returns information about all duties that belong to the team.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/teams/{teamId}/schedules',
    tags=['team_duty_schedules'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_teams__team_id_schedules(
    team_id: str = Path(..., alias='teamId'), body: ScheduleInfo = None
):
    """
    Create/Update given duty schedule.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/teams/{teamId}/schedules/deleteRange',
    tags=['team_duty_schedules'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_teams__team_id_schedules_delete_range(
    team_id: str = Path(..., alias='teamId'), body: DeleteRangeInfo = None
):
    """
    Delete duty schedules in range
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/teams/{teamId}/schedules/multiple',
    tags=['team_duty_schedules'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_teams__team_id_schedules_multiple(
    team_id: str = Path(..., alias='teamId'),
    override_existing: Optional[bool] = Query(None, alias='overrideExisting'),
    body: TeamsTeamIdSchedulesMultiplePostRequest = None,
):
    """
    Save multiple schedules. It is possible to override existing schedules if you wish
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/teams/{teamId}/schedules/{dutyId}',
    tags=['team_duty_schedules'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_teams__team_id_schedules__duty_id(
    team_id: str = Path(..., alias='teamId'), duty_id: str = Path(..., alias='dutyId')
):
    """
    Delete a specific duty.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{teamId}/schedules/{scheduleId}',
    tags=['team_duty_schedules', 'team_details_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teams__team_id_schedules__schedule_id(
    team_id: str = Path(..., alias='teamId'),
    schedule_id: str = Path(..., alias='scheduleId'),
):
    """
    Returns information of the duty schedule with the specified Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{teamId}/setupProgress',
    tags=['team_profile_updates', 'team_details_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_teams__team_id_setup_progress(team_id: str = Path(..., alias='teamId')):
    """
    Gets setup progress of a specific team.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users',
    description=""" Returns a list of user objects with details such as their email address and duty information. Only users who
are part of your team will be returned. """,
    tags=['user_profile_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_users():
    """
    Get all Users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{userId}',
    description=""" Returns a user object with details such as his email address and duty information. """,
    tags=['user_profile_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_users__user_id(user_id: str = Path(..., alias='userId')):
    """
    Get User by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{userId}/changePassword',
    tags=['user_profile_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_users__user_id_change_password(
    user_id: str = Path(..., alias='userId'), body: UpdatePasswordInfo = None
):
    """
    Updates the password of a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{userId}/checkPermissions',
    tags=['user_profile_management', 'team_membership_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_users__user_id_check_permissions(
    user_id: str = Path(..., alias='userId'),
    team_id: Optional[str] = Query(None, alias='teamId'),
    body: StringItemsWrapper = None,
):
    """
    Checks if a user has the provided permission.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{userId}/dutyStatus',
    description=""" Returns a object with duty information. """,
    tags=['user_availability_status', 'team_details_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_users__user_id_duty_status(user_id: str = Path(..., alias='userId')):
    """
    Get duty status by user Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{userId}/image',
    tags=['user_profile_management', 'user_avatar_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_users__user_id_image(
    user_id: str = Path(..., alias='userId'),
    height: Optional[int] = None,
    width: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{userId}/image',
    tags=['user_profile_management', 'user_avatar_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_users__user_id_image(user_id: str = Path(..., alias='userId')):
    """
    Uploaded a profile image for a specified user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{userId}/profile',
    tags=['user_profile_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_users__user_id_profile(
    user_id: str = Path(..., alias='userId'), body: UserProfile = None
):
    """
    Updates user profile of an user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{userId}/punchIn',
    description=""" The specified user will be punched in to duty. """,
    tags=['user_profile_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_users__user_id_punch_in(user_id: str = Path(..., alias='userId')):
    """
    Punch User in
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{userId}/punchInAsManager',
    description=""" The specified user will be punched in to duty as a manager. """,
    tags=['user_profile_management', 'team_membership_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_users__user_id_punch_in_as_manager(user_id: str = Path(..., alias='userId')):
    """
    Punch User in as Manager
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{userId}/punchOut',
    description=""" The specified user will be punched out from duty. """,
    tags=['user_attendance_tracking', 'user_profile_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_users__user_id_punch_out(user_id: str = Path(..., alias='userId')):
    """
    Punch User out
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{userId}/setupProgress',
    tags=['user_onboarding_progress'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_users__user_id_setup_progress(user_id: str = Path(..., alias='userId')):
    """
    Gets setup progress of a specific user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks',
    description=""" Returns a collection of defined outbound webhooks in the system. """,
    tags=['webhook_configuration'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_webhooks(team_id: Optional[str] = Query(None, alias='teamId')):
    """
    Get Webhooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks',
    description=""" Creates a new outbound webhook that will be notified when certain events occur. """,
    tags=['webhook_configuration'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_webhooks(body: WebhookBaseInfo = None):
    """
    Create Webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/webhooks/{webhookId}',
    description=""" Deletes the specified webhook so that it will no longer be notified. """,
    tags=['webhook_configuration'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_webhooks__webhook_id(webhook_id: str = Path(..., alias='webhookId')):
    """
    Delete Webhook by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks/{webhookId}',
    description=""" Returns information of the webhook specified by the passed id. """,
    tags=['webhook_configuration'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_webhook_by_id(webhook_id: str = Path(..., alias='webhookId')):
    """
    Get Webhook by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/webhooks/{webhookId}',
    description=""" Updates the specified webhook. """,
    tags=['webhook_configuration'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_webhooks__webhook_id(
    webhook_id: str = Path(..., alias='webhookId'), body: WebhookBaseInfo = None
):
    """
    Update Webhook by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks/{webhookId}/disable',
    tags=['webhook_configuration'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_webhooks__webhook_id_disable(webhook_id: str = Path(..., alias='webhookId')):
    """
    Ability to enable a webHook.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks/{webhookId}/enable',
    tags=['webhook_configuration'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_webhooks__webhook_id_enable(webhook_id: str = Path(..., alias='webhookId')):
    """
    Ability to disable a webHook.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
